
stream
=======
This directory contains Python scripts for running idealized ice stream experiments.

This test case simulates flow over an idealized ice stream underlain by a subglacial till with a known and specificed
yield stress distribution. For the two distributions available in this test case, analytical solutions are available
from Raymond (2000) and Schoof (2006). Some additional discussion of the Schoof test case can be found in Bueler and 
Brown (2009). 

For the Raymond test case, the yield stress within the ice stream is given a uniform value below the driving stress, and outside of the 
ice stream it is given a uniform value much higher than the driving stress (i.e., the yield stress distribution is approximated by a 
"step" function). For the Schoof test case, the till yield stress across the ice stream is given by a continuously varying 
function. 

In both cases, the basal properties vary in the across-flow direction only and are symmetric about the ice stream centerline. 
As a result, the velocity solutions are also uniform along flow and symmetric about the centerline.

To run the stream experiment, enter the following on a terminal command line:

For a serial job: 
python runStream.py 

For a parallel job: 
python runStream.py -m number_of_processors

For example:

python runStream.py -m 8

... will run the test case on 8 processors.

Note that parallel support in the current "runStream.py" script attempts to 
determine how an mpi job is executed on your machine, but if you see an error
you may need to make minor alterations to the relevant lines of the script that 
make the call to MPI.

If there are problems with running in serial on a multicore machine, try:
python runStream.py -m 1

The default is to run the model for the Raymond configuration and compare output to the Raymond
analytic solution. This can be changed by simply editing the text string in quotes in line 15 of
the runStream.py script.

Depending on the horizontal and vertical resolution of the problem, you may need to increase the
maximum number of non-linear solver iterations above the default value in order for the model to 
converge. If this is necessary, increase the value of "glissade_maxiter" in the stream.config.in file.

If the number of grid cells in the across-flow direction is too small, one may also experience 
problems and for this reason we recommend not decreasing this number below the default value of 25. 

Additional information on command line options available when running the script (e.g.,
for changing the horizontal and vertical resolution) can be found using:

python runStream.py --help

The script performs the following three steps:
1. Parses any command line options relative to the default values in "stream.config.in"
2. Creates a netCDF input file for CISM.
3. Runs CISM, and creates a netCDF output file.

The netCDF files are written in the current subdirectory. This is controlled
by a parameter in the configuration file so if you use your own configuration
file the output may be written elsewhere. The file "stream.config.in"  
includes the lines:

[CF input]
name = stream.nc

and

[CF output]
name = stream.out.nc

which are what specify the name and location of the files.

PREREQUISITES:
In order to use the confined-shelf.py script, you will need to have Python and 
one of the following Python modules installed:
Scientific.IO.NetCDF, netCDF4, or pycdf

To view the results and compare model output to the analytical solutions use:

python plotStream.py

You can also use ncview or another utility for viewing netCDF files to view the .nc output
file directly.


REFERENCES

Raymond, C. F., 2000: Energy balance of ice streams. J Glaciol, 46, 665–674.

Schoof, C., 2006: A variational approach to ice stream flow. Journal of Fluid Mechanics, 556, 227–251,
doi:10.1017/S0022112006009591.

Bueler, E., and J. Brown, 2009: Shallow shelf approximation as a “sliding law” in a thermomechanically coupled ice sheet
model. J. Geophys. Res, 114, 1–21, doi:10.1029/2008JF001179.

(last edited on 9-26-14 by SFP)
